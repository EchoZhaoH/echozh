{"title":"二叉树的最大深度","tag":"算法","date":"2021-10-18","body":"<h2>题目描述</h2>\n<p>给定一个二叉树，找出其最大深度。</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<p>示例：\n给定二叉树 [3,9,20,null,null,15,7]，</p>\n<pre><code>3\n</code></pre>\n<p>/ <br>\n9  20\n/  <br>\n15   7\n返回它的最大深度 3 。</p>\n<blockquote>\n<p>来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/maximum-depth-of-binary-tree\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n</blockquote>\n<h2>题解</h2>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">TreeNode</span>} <span class=\"hljs-variable\">root</span>\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">number</span>}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxDepth = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) {\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span> (!root) {\n        <span class=\"hljs-keyword\">return</span> sum\n    }\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\">children</span>) {\n        <span class=\"hljs-keyword\">const</span> len = children.<span class=\"hljs-property\">length</span>\n        sum += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> (!len) <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">const</span> n = []\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n            <span class=\"hljs-keyword\">const</span> item = children[i]\n            n.<span class=\"hljs-title function_\">push</span>(...[item.<span class=\"hljs-property\">right</span>, item.<span class=\"hljs-property\">left</span>].<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> !!v))\n        }\n        <span class=\"hljs-title function_\">loop</span>(n)\n    }\n    <span class=\"hljs-comment\">// 将每层的 children（right, left 值放到统一数组）。就是广度优先遍历，遍历一层 深度 +1</span>\n    <span class=\"hljs-title function_\">loop</span>([root.<span class=\"hljs-property\">right</span>, root.<span class=\"hljs-property\">left</span>].<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> !!v))\n    <span class=\"hljs-keyword\">return</span> sum\n};\n</code></pre>\n"}